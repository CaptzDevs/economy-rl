import { citizens } from "./data/sampleAgents.js";
import { tick } from "./sim/tick.js"; // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô async function
import {  createQModel, loadModel, loadShareMemory, saveModel, saveSharedMemory } from "./strategy/dqn.js";
import { trainFromLogs, setTrainedModel } from "./strategy/neuralTf.js";
import fs from "fs";
import { loadJSON, saveJSON } from "./utils/file.js";
import chalk from "chalk";
import ora from 'ora';
import { waitWithSpinner } from "./utils/loading.js";
import { compareMultipleModelPerformance } from "./utils/calculation.js";
import { sleep } from "./utils/timer.js";


const result_path = "./model/modelResult.json";

export async function runSimulation(steps = 10, delay = 500, callback) {
  let i = 0;
  for (i; i < steps; i++) {
    const aliveCitizens = citizens.filter((c) => c.alive);

    if (aliveCitizens.length === 0) {
      console.log(`\n‚ùå ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÄ‡∏™‡∏µ‡∏¢‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏¢‡∏∏‡∏î simulation ‡∏ó‡∏µ‡πà Tick ${i + 1}`);
      break;
    }

    console.log(`üìÜ Tick ${i + 1} | ‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ${aliveCitizens.length} ‡∏Ñ‡∏ô`);
    callback(i);
    await tick(aliveCitizens); // ‡∏£‡∏≠ tick ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö async)
    await sleep(delay);
    console.clear();
  }

  return i;

  /* console.log('\nüß† Logs ‡∏Ç‡∏≠‡∏á Agent ‡πÅ‡∏£‡∏Å:', citizens[0]?.memory.logs || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'); */
}


async function runIndividalDQN(epochs = 5) {
  await train(epochs)
  await waitWithSpinner('Waiting for run...', 3000, '‚úÖ Next run started!');
  run(epochs)

}

/* runIndividalDQN(50); */

